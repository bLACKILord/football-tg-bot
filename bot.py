import logging
import random
import json
import os
from datetime import datetime, time
from typing import Dict
import pytz

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, JobQueue
from telegram.constants import ParseMode

# --- –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ù–ê–°–¢–†–û–ô–ö–ò ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

DATA_FILE = 'football_data.json'
TIMEZONE = pytz.timezone('Asia/Tashkent')
ADMIN_USERNAME = "admin"
ADMIN_PASSWORD = "admin"
TOKEN = "8373138925:AAG3kjpfdSjlXrULKCLT7W-n9taXSyeoxqM"

# --- –ö–õ–ê–°–° –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –î–ê–ù–ù–´–ú–ò ---

class FootballBot:
    def __init__(self):
        self.data = self.load_data()
        self.admin_user_id = None
        self.group_chat_id = self.data.get('group_chat_id')
        
    def load_data(self) -> Dict:
        if os.path.exists(DATA_FILE):
            try:
                with open(DATA_FILE, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    data.setdefault('players', [])
                    data.setdefault('team1', [])
                    data.setdefault('team2', [])
                    data.setdefault('captain1', None)
                    data.setdefault('captain2', None)
                    data.setdefault('match_date', None)
                    data.setdefault('matches_history', [])
                    data.setdefault('remind_times', ['10:00', '18:00'])
                    data.setdefault('group_chat_id', None)
                    return data
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        return {
            'players': [],
            'team1': [],
            'team2': [],
            'captain1': None,
            'captain2': None,
            'match_date': None,
            'matches_history': [],
            'remind_times': ['10:00', '18:00'],
            'group_chat_id': None
        }
    
    def save_data(self):
        try:
            self.data['group_chat_id'] = self.group_chat_id
            with open(DATA_FILE, 'w', encoding='utf-8') as f:
                json.dump(self.data, f, indent=4, ensure_ascii=False)
            logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

bot_instance = FootballBot()

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

def is_admin(user_id: int) -> bool:
    return bot_instance.admin_user_id is not None and user_id == bot_instance.admin_user_id

async def check_admin(update: Update):
    if not is_admin(update.effective_user.id):
        await update.effective_message.reply_text(
            "‚õî <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.</b>\n–í—ã–ø–æ–ª–Ω–∏—Ç–µ /login admin admin", 
            parse_mode=ParseMode.HTML
        )
        return False
    return True

def format_match_date(iso_date: str) -> str:
    try:
        match_datetime = datetime.fromisoformat(iso_date)
        match_datetime_tz = TIMEZONE.localize(match_datetime.replace(tzinfo=None))
        formatted_date = match_datetime_tz.strftime("%d %B –≤ %H:%M")
        months = {
            'January': '—è–Ω–≤–∞—Ä—è', 'February': '—Ñ–µ–≤—Ä–∞–ª—è', 'March': '–º–∞—Ä—Ç–∞',
            'April': '–∞–ø—Ä–µ–ª—è', 'May': '–º–∞—è', 'June': '–∏—é–Ω—è',
            'July': '–∏—é–ª—è', 'August': '–∞–≤–≥—É—Å—Ç–∞', 'September': '—Å–µ–Ω—Ç—è–±—Ä—è',
            'October': '–æ–∫—Ç—è–±—Ä—è', 'November': '–Ω–æ—è–±—Ä—è', 'December': '–¥–µ–∫–∞–±—Ä—è'
        }
        for eng, rus in months.items():
            formatted_date = formatted_date.replace(eng, rus)
        return formatted_date
    except Exception:
        return "–î–∞—Ç–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞"

# --- –õ–û–ì–ò–ö–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô ---

async def set_jobs(application: Application):
    job_queue: JobQueue = application.job_queue
    current_jobs = job_queue.get_jobs_by_name("daily_reminders")
    for job in current_jobs:
        job.schedule_removal()
    
    remind_times = bot_instance.data.get('remind_times', [])
    if not bot_instance.group_chat_id:
        logger.info("group_chat_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return

    for time_str in remind_times:
        try:
            hour, minute = map(int, time_str.split(':'))
            t = time(hour, minute, tzinfo=TIMEZONE)
            job_queue.run_daily(
                send_reminder,
                time=t,
                days=(0, 1, 2, 3, 4, 5, 6),
                name="daily_reminders"
            )
            logger.info(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ {time_str}")
        except ValueError:
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {time_str}")

async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    if not bot_instance.group_chat_id or not bot_instance.data.get('match_date'):
        return
    
    match_datetime = datetime.fromisoformat(bot_instance.data['match_date'])
    match_datetime_tz = TIMEZONE.localize(match_datetime.replace(tzinfo=None))
    now_tz = datetime.now(TIMEZONE)
    
    if now_tz >= match_datetime_tz:
        return
    
    time_diff = match_datetime_tz - now_tz
    days = time_diff.days
    hours = time_diff.seconds // 3600
    minutes = (time_diff.seconds % 3600) // 60
    
    if days == 0 and hours == 0 and minutes < 30:
        return

    time_str = []
    if days > 0:
        time_str.append(f"{days} –¥–Ω.")
    if hours > 0:
        time_str.append(f"{hours} —á.")
    if minutes > 0:
        time_str.append(f"{minutes} –º–∏–Ω.")
    
    formatted_date = format_match_date(bot_instance.data['match_date'])
    message = (
        f"‚è≥ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –î–æ –º–∞—Ç—á–∞ –æ—Å—Ç–∞–ª–æ—Å—å {' '.join(time_str)}!</b>\n"
        f"üïï –ú–∞—Ç—á —Å–æ—Å—Ç–æ–∏—Ç—Å—è {formatted_date}"
    )
    
    await context.bot.send_message(
        chat_id=bot_instance.group_chat_id,
        text=message,
        parse_mode=ParseMode.HTML
    )

async def post_init_setup(application: Application):
    if bot_instance.group_chat_id:
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
        await set_jobs(application)
    else:
        logger.info("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–æ—Å–ª–µ /login")

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–æ—Ç–∞"""
    welcome_text = """
üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§—É—Ç–±–æ–ª—å–Ω—ã–π –±–æ—Ç!</b>

–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –Ω—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:
üîê /login admin admin

–ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.
    """
    await update.message.reply_text(welcome_text, parse_mode=ParseMode.HTML)

async def login(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) != 2:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /login admin admin")
        return
    
    username, password = args
    if username == ADMIN_USERNAME and password == ADMIN_PASSWORD:
        bot_instance.admin_user_id = update.effective_user.id
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–∞—Ç–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
        if update.message.chat.type in ['group', 'supergroup']:
            bot_instance.group_chat_id = update.message.chat_id
        elif not bot_instance.group_chat_id:
            # –ï—Å–ª–∏ —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç –∏ group_chat_id –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            bot_instance.group_chat_id = update.message.chat_id
        
        bot_instance.save_data()
        
        await update.message.reply_text(
            "‚úÖ <b>–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω. –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω!</b>\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.\n"
            f"<i>ID —á–∞—Ç–∞: {bot_instance.group_chat_id}</i>",
            parse_mode=ParseMode.HTML
        )
        await set_jobs(context.application)
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if is_admin(update.effective_user.id):
        help_text = """
üìã <b>–ö–û–ú–ê–ù–î–´ –ë–û–¢–ê (–ê–¥–º–∏–Ω)</b>

<b>üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º–∏:</b>
/addplayer –ò–º—è - –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞
/addplayers –ò–º—è1, –ò–º—è2 - –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ
/removeplayer –ò–º—è - —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞
/players - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
/clearplayers - –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫

<b>‚öΩ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥:</b>
/split - —Å–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
/setcaptain 1 –ò–º—è - –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∫–∞–ø–∏—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥—ã 1
/setcaptain 2 –ò–º—è - –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∫–∞–ø–∏—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥—ã 2

<b>üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–µ–º:</b>
/setdate –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú - –Ω–∞–∑–Ω–∞—á–∏—Ç—å –¥–∞—Ç—É –º–∞—Ç—á–∞
/announce - –æ–±—ä—è–≤–∏—Ç—å –º–∞—Ç—á –≤ –≥—Ä—É–ø–ø–µ
/score X-Y - –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞

<b>üìä –ò—Å—Ç–æ—Ä–∏—è:</b>
/history - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∞—Ç—á–µ–π
/match –Ω–æ–º–µ—Ä - –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç—á–∞
/clearmatches - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é

<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
/setremindtimes –ß–ß:–ú–ú,–ß–ß:–ú–ú - –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
/logout - –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<i>üí° –°–æ–≤–µ—Ç: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!</i>
        """
    else:
        help_text = """
üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§—É—Ç–±–æ–ª—å–Ω—ã–π –±–æ—Ç!</b>

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å —Ñ—É—Ç–±–æ–ª—å–Ω—ã–µ –º–∞—Ç—á–∏:
‚Ä¢ üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –∏–≥—Ä–æ–∫–æ–≤
‚Ä¢ ‚öΩ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
‚Ä¢ üìÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –º–∞—Ç—á–µ–π
‚Ä¢ ‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
‚Ä¢ üìä –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –º–∞—Ç—á–µ–π

<b>–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:</b>
üîê /login admin admin

–ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.
        """
    await update.message.reply_text(help_text, parse_mode=ParseMode.HTML)

async def addplayer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_admin(update):
        return
    
    if not context.args:
        await update.effective_message.reply_text(
            "‚ö†Ô∏è <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> /addplayer –ò–º—è\n\n"
            "<i>–ü—Ä–∏–º–µ—Ä: /addplayer –°–∞—à–∞</i>",
            parse_mode=ParseMode.HTML
        )
        return
    
    player_name = ' '.join(context.args).strip()
    
    if not player_name:
        await update.effective_message.reply_text(
            "‚ö†Ô∏è –ò–º—è –∏–≥—Ä–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
            parse_mode=ParseMode.HTML
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
    if player_name in bot_instance.data['players']:
        await update.effective_message.reply_text(
            f"‚ö†Ô∏è –ò–≥—Ä–æ–∫ <b>¬´{player_name}¬ª</b> —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ!\n\n"
            f"üìã –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(bot_instance.data['players'])}\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /players –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞",
            parse_mode=ParseMode.HTML
        )
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
    bot_instance.data['players'].append(player_name)
    bot_instance.save_data()
    
    logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∏–≥—Ä–æ–∫: {player_name} | –í—Å–µ–≥–æ: {len(bot_instance.data['players'])}")
    
    await update.effective_message.reply_text(
        f"‚úÖ <b>–ò–≥—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
        f"üë§ <b>{player_name}</b>\n"
        f"üìä –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: <b>{len(bot_instance.data['players'])}</b>",
        parse_mode=ParseMode.HTML
    )

async def addplayers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_admin(update):
        return
    
    if not context.args:
        await update.effective_message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addplayers –ò–º—è1, –ò–º—è2, –ò–º—è3")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    full_text = update.effective_message.text.split(maxsplit=1)
    if len(full_text) < 2:
        await update.effective_message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addplayers –ò–º—è1, –ò–º—è2, –ò–º—è3")
        return
    
    players_input = full_text[1]
    players_list = [p.strip() for p in players_input.split(',') if p.strip()]
    
    if not players_list:
        await update.effective_message.reply_text("‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω—ã –∏–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤")
        return
    
    added = []
    duplicates = []
    
    for player in players_list:
        if player in bot_instance.data['players']:
            duplicates.append(player)
        else:
            bot_instance.data['players'].append(player)
            added.append(player)
    
    bot_instance.save_data()
    
    message = ""
    if added:
        message += f"‚úÖ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: {len(added)}</b>\n"
        message += "\n".join([f"‚Ä¢ {p}" for p in added])
    if duplicates:
        message += f"\n\n‚ö†Ô∏è <b>–£–∂–µ –≤ —Å–ø–∏—Å–∫–µ:</b>\n"
        message += "\n".join([f"‚Ä¢ {p}" for p in duplicates])
    message += f"\n\n<b>–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(bot_instance.data['players'])}</b>"
    
    await update.effective_message.reply_text(message, parse_mode=ParseMode.HTML)

async def players(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_admin(update):
        return
    
    players_list = bot_instance.data.get('players', [])
    
    if not players_list:
        await update.effective_message.reply_text(
            "üìã <b>–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø—É—Å—Ç</b>\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –∏–≥—Ä–æ–∫–æ–≤:\n"
            "‚Ä¢ /addplayer –ò–º—è - –¥–æ–±–∞–≤–∏—Ç—å –æ–¥–Ω–æ–≥–æ\n"
            "‚Ä¢ /addplayers –ò–º—è1, –ò–º—è2, –ò–º—è3 - –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ",
            parse_mode=ParseMode.HTML
        )
        return
    
    message = f"üìã <b>–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ ({len(players_list)}):</b>\n\n"
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 20 –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —á—Ç–µ–Ω–∏—è
    for i, p in enumerate(players_list, 1):
        message += f"{i}. {p}\n"
        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∫–∞–∂–¥—ã–µ 20 –∏–≥—Ä–æ–∫–æ–≤
        if i % 20 == 0 and i < len(players_list):
            message += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    message += f"\n<i>–î–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /split</i>"
    
    await update.effective_message.reply_text(message, parse_mode=ParseMode.HTML)

async def removeplayer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_admin(update):
        return
    
    if not context.args:
        await update.effective_message.reply_text(
            "‚ö†Ô∏è <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> /removeplayer –ò–º—è\n\n"
            "<i>–ü—Ä–∏–º–µ—Ä: /removeplayer –°–∞—à–∞</i>",
            parse_mode=ParseMode.HTML
        )
        return
    
    player_name = ' '.join(context.args).strip()
    
    if not player_name:
        await update.effective_message.reply_text(
            "‚ö†Ô∏è –ò–º—è –∏–≥—Ä–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
            parse_mode=ParseMode.HTML
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–≥—Ä–æ–∫–∞
    if player_name not in bot_instance.data['players']:
        await update.effective_message.reply_text(
            f"‚ö†Ô∏è –ò–≥—Ä–æ–∫ <b>¬´{player_name}¬ª</b> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ!\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /players –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞",
            parse_mode=ParseMode.HTML
        )
        return
    
    # –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    bot_instance.data['players'].remove(player_name)
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ –∫–æ–º–∞–Ω–¥, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å
    if player_name in bot_instance.data.get('team1', []):
        bot_instance.data['team1'].remove(player_name)
    if player_name in bot_instance.data.get('team2', []):
        bot_instance.data['team2'].remove(player_name)
    
    # –ï—Å–ª–∏ –æ–Ω –±—ã–ª –∫–∞–ø–∏—Ç–∞–Ω–æ–º, —É–±–∏—Ä–∞–µ–º –∫–∞–ø–∏—Ç–∞–Ω—Å—Ç–≤–æ
    if bot_instance.data.get('captain1') == player_name:
        bot_instance.data['captain1'] = None
    if bot_instance.data.get('captain2') == player_name:
        bot_instance.data['captain2'] = None
    
    bot_instance.save_data()
    
    logger.info(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω –∏–≥—Ä–æ–∫: {player_name} | –û—Å—Ç–∞–ª–æ—Å—å: {len(bot_instance.data['players'])}")
    
    await update.effective_message.reply_text(
        f"‚úÖ <b>–ò–≥—Ä–æ–∫ —É–¥–∞–ª—ë–Ω!</b>\n\n"
        f"üë§ <b>{player_name}</b>\n"
        f"üìä –û—Å—Ç–∞–ª–æ—Å—å –∏–≥—Ä–æ–∫–æ–≤: <b>{len(bot_instance.data['players'])}</b>",
        parse_mode=ParseMode.HTML
    )

async def split(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–ª—è callback query
    if hasattr(update, 'callback_query') and update.callback_query:
        if not is_admin(update.callback_query.from_user.id):
            await update.callback_query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
            return
    else:
        if not await check_admin(update):
            return
    
    players_list = bot_instance.data['players'].copy()
    
    if len(players_list) < 2:
        await update.effective_message.reply_text("‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞. –î–æ–±–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ /addplayer.")
        return
    
    random.shuffle(players_list)
    mid = len(players_list) // 2
    team1 = players_list[:mid]
    team2 = players_list[mid:2*mid]
    
    bot_instance.data['team1'] = team1
    bot_instance.data['team2'] = team2
    bot_instance.data['captain1'] = random.choice(team1) if team1 else None
    bot_instance.data['captain2'] = random.choice(team2) if team2 else None
    bot_instance.save_data()
    
    message = "‚öΩ <b>–†–∞–Ω–¥–æ–º–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:</b>\n\n"
    message += "üü¢ <b>–ö–æ–º–∞–Ω–¥–∞ 1:</b>\n"
    for player in team1:
        mark = " üëë" if player == bot_instance.data['captain1'] else ""
        message += f"‚Ä¢ {player}{mark}\n"
    
    message += "\nüîµ <b>–ö–æ–º–∞–Ω–¥–∞ 2:</b>\n"
    for player in team2:
        mark = " üëë" if player == bot_instance.data['captain2'] else ""
        message += f"‚Ä¢ {player}{mark}\n"
    
    if len(players_list) % 2 == 1:
        message += f"\n‚ö†Ô∏è –ó–∞–ø–∞—Å–Ω–æ–π: <b>{players_list[-1]}</b>"
    
    message += f"\n\n<b>–ö–∞–ø–∏—Ç–∞–Ω—ã:</b>\nüü¢ {bot_instance.data['captain1']}  |  üîµ {bot_instance.data['captain2']}"
    
    await update.effective_message.reply_text(message, parse_mode=ParseMode.HTML)

async def setcaptain(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_admin(update):
        return
    if len(context.args) < 2:
        await update.effective_message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setcaptain <1/2> <–ò–º—è>")
        return
    
    team_num = context.args[0]
    captain_name = ' '.join(context.args[1:]).strip()
    
    if team_num == '1':
        if captain_name not in bot_instance.data['team1']:
            await update.effective_message.reply_text("‚ö†Ô∏è –≠—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –≤ –∫–æ–º–∞–Ω–¥–µ 1")
            return
        bot_instance.data['captain1'] = captain_name
    elif team_num == '2':
        if captain_name not in bot_instance.data['team2']:
            await update.effective_message.reply_text("‚ö†Ô∏è –≠—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –≤ –∫–æ–º–∞–Ω–¥–µ 2")
            return
        bot_instance.data['captain2'] = captain_name
    else:
        await update.effective_message.reply_text("‚ö†Ô∏è –ù–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –∏–ª–∏ 2")
        return
    
    bot_instance.save_data()
    await update.effective_message.reply_text(
        f"‚úÖ <b>–ö–∞–ø–∏—Ç–∞–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã:</b>\n"
        f"üü¢ {bot_instance.data['captain1']}  |  üîµ {bot_instance.data['captain2']}",
        parse_mode=ParseMode.HTML
    )

async def setdate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_admin(update):
        return
    if len(context.args) != 2:
        await update.effective_message.reply_text(
            "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setdate –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /setdate 2025-10-20 18:30"
        )
        return
    
    date_str = f"{context.args[0]} {context.args[1]}"
    try:
        match_datetime = datetime.strptime(date_str, "%Y-%m-%d %H:%M")
        bot_instance.data['match_date'] = match_datetime.isoformat()
        bot_instance.save_data()
        
        formatted_date = format_match_date(bot_instance.data['match_date'])
        message = f"üìÜ <b>–ú–∞—Ç—á –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ {formatted_date}</b>"
        
        keyboard = []
        has_teams = bool(bot_instance.data['team1'])
        has_enough_players = len(bot_instance.data['players']) >= 2
        
        if has_enough_players:
            action_text = "üîÑ –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å" if has_teams else "‚öΩ –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å"
            message += "\n\nü§î –ñ–µ–ª–∞–µ—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã —Å–µ–π—á–∞—Å?"
            keyboard.append(InlineKeyboardButton(
                f"{action_text} –∫–æ–º–∞–Ω–¥—ã",
                callback_data='split_now'
            ))
        elif not has_enough_players:
            message += "\n\n‚ö†Ô∏è –î–æ–±–∞–≤—å—Ç–µ –∏–≥—Ä–æ–∫–æ–≤ —á–µ—Ä–µ–∑ /addplayer"
        
        if keyboard:
            reply_markup = InlineKeyboardMarkup([keyboard])
            await update.effective_message.reply_text(
                message,
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup
            )
        else:
            await update.effective_message.reply_text(message, parse_mode=ParseMode.HTML)
        
        await set_jobs(context.application)
    except ValueError:
        await update.effective_message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú")

async def announce(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_admin(update):
        return
    if not bot_instance.data.get('match_date'):
        await update.effective_message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –¥–∞—Ç—É —á–µ—Ä–µ–∑ /setdate")
        return
    if not bot_instance.data['team1'] or not bot_instance.data['team2']:
        await update.effective_message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∏–≥—Ä–æ–∫–æ–≤ —á–µ—Ä–µ–∑ /split")
        return
    
    formatted_date = format_match_date(bot_instance.data['match_date'])
    message = f"‚öΩ <b>–°–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á —Å–æ—Å—Ç–æ–∏—Ç—Å—è {formatted_date}!</b>\n\n"
    message += "üü¢ <b>–ö–æ–º–∞–Ω–¥–∞ 1:</b>\n"
    for player in bot_instance.data['team1']:
        mark = " (–∫–∞–ø–∏—Ç–∞–Ω)" if player == bot_instance.data['captain1'] else ""
        message += f"‚Ä¢ {player}{mark}\n"
    message += "\nüîµ <b>–ö–æ–º–∞–Ω–¥–∞ 2:</b>\n"
    for player in bot_instance.data['team2']:
        mark = " (–∫–∞–ø–∏—Ç–∞–Ω)" if player == bot_instance.data['captain2'] else ""
        message += f"‚Ä¢ {player}{mark}\n"
    message += "\n‚öΩ –í—Å–µ–º —É–¥–∞—á–∏!"
    await update.effective_message.reply_text(message, parse_mode=ParseMode.HTML)

async def score(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_admin(update):
        return
    if not context.args:
        await update.effective_message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /score X-Y (–Ω–∞–ø—Ä–∏–º–µ—Ä: /score 3-2)")
        return
    
    score_input = context.args[0]
    if '-' not in score_input:
        await update.effective_message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /score X-Y")
        return
    
    try:
        score1, score2 = map(int, score_input.split('-'))
        match_data = {
            'date': bot_instance.data.get('match_date'),
            'team1': bot_instance.data['team1'].copy(),
            'team2': bot_instance.data['team2'].copy(),
            'captain1': bot_instance.data['captain1'],
            'captain2': bot_instance.data['captain2'],
            'score1': score1,
            'score2': score2
        }
        bot_instance.data['matches_history'].append(match_data)
        bot_instance.save_data()
        
        winner = ""
        if score1 > score2:
            winner = "\nüèÜ –ü–æ–±–µ–¥–∏–ª–∞ –∫–æ–º–∞–Ω–¥–∞ 1!"
        elif score2 > score1:
            winner = "\nüèÜ –ü–æ–±–µ–¥–∏–ª–∞ –∫–æ–º–∞–Ω–¥–∞ 2!"
        else:
            winner = "\nü§ù –ù–∏—á—å—è!"
        
        await update.effective_message.reply_text(
            f"‚úÖ <b>–°—á—ë—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω:</b> üü¢ {score1} ‚Äî {score2} üîµ{winner}",
            parse_mode=ParseMode.HTML
        )
    except ValueError:
        await update.effective_message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—á—ë—Ç–∞!")

async def history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_admin(update):
        return
    matches = bot_instance.data.get('matches_history', [])
    if not matches:
        await update.effective_message.reply_text("üìú –ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π –ø—É—Å—Ç–∞.")
        return
    
    message = "üìú <b>–ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):</b>\n\n"
    for i, match in enumerate(reversed(matches[-10:]), 1):
        match_date = "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        if match.get('date'):
            match_date = format_match_date(match['date']).split(" –≤ ")[0]
        idx = len(matches) - i + 1
        message += (
            f"#{idx} ({match_date}) ‚Äî üü¢{match['score1']}:{match['score2']}üîµ "
            f"(–ö1: {match.get('captain1', '–ù–µ—Ç')} | –ö2: {match.get('captain2', '–ù–µ—Ç')})\n"
        )
    await update.effective_message.reply_text(message, parse_mode=ParseMode.HTML)

async def match_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_admin(update):
        return
    if not context.args:
        await update.effective_message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /match <–Ω–æ–º–µ—Ä>")
        return
    
    try:
        match_num = int(context.args[0])
        matches = bot_instance.data.get('matches_history', [])
        if match_num < 1 or match_num > len(matches):
            await update.effective_message.reply_text("‚ö†Ô∏è –ú–∞—Ç—á —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        match = matches[match_num - 1]
        match_date = "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        if match.get('date'):
            match_date = format_match_date(match['date'])
        
        message = f"üìÖ <b>–ú–∞—Ç—á ‚Ññ{match_num} ‚Äî {match_date}</b>\n\n"
        message += f"üü¢ <b>–ö–æ–º–∞–Ω–¥–∞ 1</b> (–∫–∞–ø–∏—Ç–∞–Ω: {match.get('captain1', '–ù–µ—Ç')})\n"
        for player in match['team1']:
            message += f"‚Ä¢ {player}\n"
        message += f"\nüîµ <b>–ö–æ–º–∞–Ω–¥–∞ 2</b> (–∫–∞–ø–∏—Ç–∞–Ω: {match.get('captain2', '–ù–µ—Ç')})\n"
        for player in match['team2']:
            message += f"‚Ä¢ {player}\n"
        message += f"\nüèÅ <b>–°—á—ë—Ç:</b> {match['score1']} ‚Äî {match['score2']}"
        await update.effective_message.reply_text(message, parse_mode=ParseMode.HTML)
    except ValueError:
        await update.effective_message.reply_text("‚ùå –ù–æ–º–µ—Ä –º–∞—Ç—á–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

async def clearplayers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_admin(update):
        return
    bot_instance.data['players'] = []
    bot_instance.data['team1'] = []
    bot_instance.data['team2'] = []
    bot_instance.data['captain1'] = None
    bot_instance.data['captain2'] = None
    bot_instance.save_data()
    await update.effective_message.reply_text("‚úÖ –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –æ—á–∏—â–µ–Ω.")

async def clearmatches(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_admin(update):
        return
    bot_instance.data['matches_history'] = []
    bot_instance.save_data()
    await update.effective_message.reply_text("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π –æ—á–∏—â–µ–Ω–∞.")

async def logout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_admin(update):
        return
    bot_instance.admin_user_id = None
    bot_instance.group_chat_id = None
    bot_instance.save_data()
    
    job_queue: JobQueue = context.application.job_queue
    current_jobs = job_queue.get_jobs_by_name("daily_reminders")
    for job in current_jobs:
        job.schedule_removal()
    await update.effective_message.reply_text("üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")

async def setremindtimes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_admin(update):
        return
    if not context.args:
        await update.effective_message.reply_text(
            f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setremindtimes –ß–ß:–ú–ú,–ß–ß:–ú–ú\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: /setremindtimes 09:30,21:00\n\n"
            f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: <b>{', '.join(bot_instance.data.get('remind_times', []))}</b>",
            parse_mode=ParseMode.HTML
        )
        return
    
    times_input = context.args[0]
    times = [t.strip() for t in times_input.split(',') if t.strip()]
    valid_times = []
    for t_str in times:
        try:
            datetime.strptime(t_str, "%H:%M")
            valid_times.append(t_str)
        except ValueError:
            await update.effective_message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {t_str}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")
            return
    
    bot_instance.data['remind_times'] = valid_times
    bot_instance.save_data()
    await set_jobs(context.application)
    await update.effective_message.reply_text(
        f"‚úÖ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ: <b>{', '.join(valid_times)}</b>\n"
        f"<i>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —á–∞—Ç ID: {bot_instance.group_chat_id}</i>",
        parse_mode=ParseMode.HTML
    )

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'split_now':
        if not is_admin(query.from_user.id):
            await query.edit_message_text(
                "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.",
                reply_markup=None
            )
            return
        await split(update, context)
        await query.edit_message_markup(reply_markup=None)

# --- –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ---

def main():
    application = Application.builder().token(TOKEN).build()
    application.post_init = post_init_setup
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("login", login))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("addplayer", addplayer))
    application.add_handler(CommandHandler("addplayers", addplayers))
    application.add_handler(CommandHandler("removeplayer", removeplayer))
    application.add_handler(CommandHandler("players", players))
    application.add_handler(CommandHandler("split", split))
    application.add_handler(CommandHandler("setcaptain", setcaptain))
    application.add_handler(CommandHandler("setdate", setdate))
    application.add_handler(CommandHandler("announce", announce))
    application.add_handler(CommandHandler("score", score))
    application.add_handler(CommandHandler("history", history))
    application.add_handler(CommandHandler("match", match_details))
    application.add_handler(CommandHandler("clearplayers", clearplayers))
    application.add_handler(CommandHandler("clearmatches", clearmatches))
    application.add_handler(CommandHandler("logout", logout))
    application.add_handler(CommandHandler("setremindtimes", setremindtimes))
    application.add_handler(CallbackQueryHandler(button))
    
    logger.info("‚öΩ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()